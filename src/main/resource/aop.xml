<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="    
          http://www.springframework.org/schema/beans    
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
          http://www.springframework.org/schema/context    
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/aop    
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!--aop的代码位置-->
	<context:component-scan base-package="aop" />
	<!-- 打开aop 注解 <aop:aspectj-autoproxy proxy-target-class="true"/> -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 系统服务组件的切面Bean -->
	<!-- <bean id="serviceAspect" class="aop.annotation.AspectAdvice" /> -->
	<bean id="writelog" class="aop.WebResponseResultLogAop" />
	<bean id="logAspect" class="aop.LogAspect"></bean>
	<!-- <bean id="business" class="com.spring.aop.BusinessCode" /> -->

	<!-- spring 的aop配置的切面只能在bean中定义了以后，才能够使用 -->
	<aop:config proxy-target-class="true">
		<!-- 用来定义切面，该切面可以包含多个切入点和通知，而且标签内部的通知和切入点定义是无序的；和advisor的区别就在此，advisor只包含一个通知和一个切入点 -->
		<aop:pointcut id="worklogAopMethod"
			expression="execution(* aop.Business.doSomeThing(..))" />
		<!-- <aop:aspect ref="logAspect">
			<aop:before method="doBefore" pointcut-ref="log" />
			<aop:after method="doAfter" pointcut-ref="log" />
		</aop:aspect> -->
		<aop:advisor advice-ref="writelog" pointcut-ref="worklogAopMethod" />
		<!-- 注意 pointcut ，advisor，aspect 之间的顺序 -->
	</aop:config>

</beans>